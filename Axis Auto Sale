# Import the Zip file
path_to_zip_file = "datasets-1.zip"
directory_to_extract_to = ""

import zipfile
zip_ref = zipfile.ZipFile(path_to_zip_file, 'r')
zip_ref.extractall(directory_to_extract_to)
zip_ref.close()

# Load the csv data
import pandas as pd
Location = "datasets/axisdata.csv"
df = pd.read_csv(Location)

# Average cars sold per month
df['Cars Sold'].mean()

# Max Cars sold per month
df['Cars Sold'].max()

# Min cars sold per month
df['Cars Sold'].min()

# Average Cars sold per month by gender
pd.pivot_table(df, values = ['Cars Sold'], index = ['Gender'])

# Average hours worked by people selling > 3 Cars per month
high_sellers = df[df['Cars Sold'] > 3]
high_sellers['Hours Worked'].mean()

# Average years of experience
df['Years Experience'].mean()

# Average years of experience for salesmen selling > 3 cars
high_sellers = df[df['Cars Sold'] > 3]
high_sellers['Years Experience'].mean()

# Average cars sold per month based on training
pd.pivot_table(df, values = ['Cars Sold'], index = ['SalesTraining'])

# What do you think the best indicator for a good salesperson
#Training seems to be a strong indicator for a good salesperson. 

# Change the Column names
headers = list(df.columns.values)
headers[3] = 'Hours'
headers[5] = 'Years_Experienced'
headers[6] = 'Cars_Sold'
df.columns = headers
df.head()

# Make Sales Training into a numeric value
# created a training conversion function
def training(x):
    if x == "Y":
        return 1
    if x == "N":
        return 0
        
# Change the 'SalesTraining' Column using the training function created above
df['SalesTraining'] = df['SalesTraining'].apply(training)
df.tail()

# Make Gender into a numeric value
# created a Gender to numeric function
def gender(x):
    if x == "F":
        return 1
    if x == "M":
        return 0

# Change the 'Gender' Column
df['Gender'] = df['Gender'].apply(gender)
df.tail()

# Correlation
df.corr()
# Hours and Sales Training have a low positive correlation of .25 and .19.

# Reggsion without intercept
import statsmodels.formula.api as sm
result = sm.ols(formula = 'Cars_Sold ~ Hours + Years_Experienced + SalesTraining - 1', data = df).fit()
result.summary()

#Regression without Years of Experience
result2 = sm.ols(formula = 'Cars_Sold ~ Hours + SalesTraining - 1', data = df).fit()
result2.summary()
