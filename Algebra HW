# Import the Zip file
path_to_zip_file = "datasets-1.zip"
directory_to_extract_to = ""

import zipfile
zip_ref = zipfile.ZipFile(path_to_zip_file, 'r')
zip_ref.extractall(directory_to_extract_to)
zip_ref.close()

# Load the csv data
import pandas as pd

Location = "datasets/algebradata.csv"
df = pd.read_csv(Location)


# Observe and clean the data
df = df.dropna()
df.head()

# Percentage of passing grade
# total number of students
total_count = len(df)
# number of students with Grades A, B, or C
pass_grade = len(df[(df['Grade'] == 'A') | (df['Grade'] == 'B') | (df['Grade'] == 'C')])
# percentage of passing grade
float(pass_grade) / total_count


# Percentage of women with a passing grade
# total number of women
women_total = len(df[df['Gender'] == 'F'])
# total number of women who passed
pass_grade_women = len(df[(df['Gender'] == 'F') & ((df['Grade'] == 'A') | (df['Grade'] == 'B') | (df['Grade'] == 'C'))])
# percentage of women who passed
float(pass_grade_women) / women_total


# Average hours of study for all students
df['Hours of Study'].mean()

# Average hours of study for students with passing grade
# pass_grade will be a dataframe of all students with passing grades
pass_grade = df[(df['Grade'] == 'A') | (df['Grade'] == 'B') | (df['Grade'] == 'C')]
pass_grade['Hours of Study'].mean()

# Correlation between Hours of Study and Grade
# First convert Grades into Numeric data

def grade_convert(x):
    if x == "A":
        return 90
    if x == "B":
        return 80
    if x == "C":
        return 70
    if x == "D":
        return 60
    if x == "F":
        return 50

# Change the 'Grade' Columns
df['Grade'] = df['Grade'].apply(grade_convert)
df.tail()

# Correlation between Grade and Hours of Study
df.corr()

# Change header name
headers = list(df.columns.values)
headers[4] = 'hours'
df.columns = headers

# Regression without intercept
import statsmodels.formula.api as sm
result = sm.ols(formula = 'Grade ~ hours -1', data = df).fit()
result.summary()
